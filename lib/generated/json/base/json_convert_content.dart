// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:atest/shop/bean/balance_bean_entity.dart';
import 'package:atest/shop/bean/banner_bean_entity.dart';
import 'package:atest/shop/bean/cart_bean_entity.dart';
import 'package:atest/shop/bean/collect_item_entity.dart';
import 'package:atest/shop/bean/feature_entity.dart';
import 'package:atest/shop/bean/good_bean_entity.dart';
import 'package:atest/shop/bean/good_cat_bean_entity.dart';
import 'package:atest/shop/bean/order_bean_entity.dart';
import 'package:atest/shop/bean/page_bean_entity.dart';
import 'package:atest/shop/bean/promotion_bean_entity.dart';
import 'package:atest/shop/bean/qr_bean_entity.dart';
import 'package:atest/shop/bean/setting_bean_entity.dart';
import 'package:atest/shop/bean/type_item_entity.dart';
import 'package:atest/shop/bean/user_info_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<BalanceBeanEntity>[] is M) {
      return data.map<BalanceBeanEntity>((Map<String, dynamic> e) =>
          BalanceBeanEntity.fromJson(e)).toList() as M;
    }
    if (<BannerBeanEntity>[] is M) {
      return data.map<BannerBeanEntity>((Map<String, dynamic> e) =>
          BannerBeanEntity.fromJson(e)).toList() as M;
    }
    if (<CartBeanEntity>[] is M) {
      return data.map<CartBeanEntity>((Map<String, dynamic> e) =>
          CartBeanEntity.fromJson(e)).toList() as M;
    }
    if (<CartBeanList>[] is M) {
      return data.map<CartBeanList>((Map<String, dynamic> e) =>
          CartBeanList.fromJson(e)).toList() as M;
    }
    if (<CartBeanListAddress>[] is M) {
      return data.map<CartBeanListAddress>((Map<String, dynamic> e) =>
          CartBeanListAddress.fromJson(e)).toList() as M;
    }
    if (<CartBeanListProducts>[] is M) {
      return data.map<CartBeanListProducts>((Map<String, dynamic> e) =>
          CartBeanListProducts.fromJson(e)).toList() as M;
    }
    if (<CartBeanListProductsGradeInfo>[] is M) {
      return data.map<CartBeanListProductsGradeInfo>((Map<String, dynamic> e) =>
          CartBeanListProductsGradeInfo.fromJson(e)).toList() as M;
    }
    if (<CollectItemEntity>[] is M) {
      return data.map<CollectItemEntity>((Map<String, dynamic> e) =>
          CollectItemEntity.fromJson(e)).toList() as M;
    }
    if (<CollectItemGoods>[] is M) {
      return data.map<CollectItemGoods>((Map<String, dynamic> e) =>
          CollectItemGoods.fromJson(e)).toList() as M;
    }
    if (<FeatureEntity>[] is M) {
      return data.map<FeatureEntity>((Map<String, dynamic> e) =>
          FeatureEntity.fromJson(e)).toList() as M;
    }
    if (<FeatureProduct>[] is M) {
      return data.map<FeatureProduct>((Map<String, dynamic> e) =>
          FeatureProduct.fromJson(e)).toList() as M;
    }
    if (<FeatureCanshu>[] is M) {
      return data.map<FeatureCanshu>((Map<String, dynamic> e) =>
          FeatureCanshu.fromJson(e)).toList() as M;
    }
    if (<GoodBeanEntity>[] is M) {
      return data.map<GoodBeanEntity>((Map<String, dynamic> e) =>
          GoodBeanEntity.fromJson(e)).toList() as M;
    }
    if (<GoodBeanProduct>[] is M) {
      return data.map<GoodBeanProduct>((Map<String, dynamic> e) =>
          GoodBeanProduct.fromJson(e)).toList() as M;
    }
    if (<GoodBeanProductGradeInfo>[] is M) {
      return data.map<GoodBeanProductGradeInfo>((Map<String, dynamic> e) =>
          GoodBeanProductGradeInfo.fromJson(e)).toList() as M;
    }
    if (<GoodBeanCanshu>[] is M) {
      return data.map<GoodBeanCanshu>((Map<String, dynamic> e) =>
          GoodBeanCanshu.fromJson(e)).toList() as M;
    }
    if (<GoodCatBeanEntity>[] is M) {
      return data.map<GoodCatBeanEntity>((Map<String, dynamic> e) =>
          GoodCatBeanEntity.fromJson(e)).toList() as M;
    }
    if (<GoodCatBeanChild>[] is M) {
      return data.map<GoodCatBeanChild>((Map<String, dynamic> e) =>
          GoodCatBeanChild.fromJson(e)).toList() as M;
    }
    if (<GoodCatBeanGoods>[] is M) {
      return data.map<GoodCatBeanGoods>((Map<String, dynamic> e) =>
          GoodCatBeanGoods.fromJson(e)).toList() as M;
    }
    if (<GoodCatBeanGoodsProduct>[] is M) {
      return data.map<GoodCatBeanGoodsProduct>((Map<String, dynamic> e) =>
          GoodCatBeanGoodsProduct.fromJson(e)).toList() as M;
    }
    if (<GoodCatBeanGoodsCanshu>[] is M) {
      return data.map<GoodCatBeanGoodsCanshu>((Map<String, dynamic> e) =>
          GoodCatBeanGoodsCanshu.fromJson(e)).toList() as M;
    }
    if (<GoodCatBeanGoodsBrand>[] is M) {
      return data.map<GoodCatBeanGoodsBrand>((Map<String, dynamic> e) =>
          GoodCatBeanGoodsBrand.fromJson(e)).toList() as M;
    }
    if (<OrderBeanEntity>[] is M) {
      return data.map<OrderBeanEntity>((Map<String, dynamic> e) =>
          OrderBeanEntity.fromJson(e)).toList() as M;
    }
    if (<OrderBeanList>[] is M) {
      return data.map<OrderBeanList>((Map<String, dynamic> e) =>
          OrderBeanList.fromJson(e)).toList() as M;
    }
    if (<OrderBeanListItems>[] is M) {
      return data.map<OrderBeanListItems>((Map<String, dynamic> e) =>
          OrderBeanListItems.fromJson(e)).toList() as M;
    }
    if (<PageBeanEntity>[] is M) {
      return data.map<PageBeanEntity>((Map<String, dynamic> e) =>
          PageBeanEntity.fromJson(e)).toList() as M;
    }
    if (<PageBeanChild>[] is M) {
      return data.map<PageBeanChild>((Map<String, dynamic> e) =>
          PageBeanChild.fromJson(e)).toList() as M;
    }
    if (<PageBeanChildProduct>[] is M) {
      return data.map<PageBeanChildProduct>((Map<String, dynamic> e) =>
          PageBeanChildProduct.fromJson(e)).toList() as M;
    }
    if (<PageBeanChildCanshu>[] is M) {
      return data.map<PageBeanChildCanshu>((Map<String, dynamic> e) =>
          PageBeanChildCanshu.fromJson(e)).toList() as M;
    }
    if (<PromotionBeanEntity>[] is M) {
      return data.map<PromotionBeanEntity>((Map<String, dynamic> e) =>
          PromotionBeanEntity.fromJson(e)).toList() as M;
    }
    if (<PromotionBeanList>[] is M) {
      return data.map<PromotionBeanList>((Map<String, dynamic> e) =>
          PromotionBeanList.fromJson(e)).toList() as M;
    }
    if (<PromotionBeanListChild>[] is M) {
      return data.map<PromotionBeanListChild>((Map<String, dynamic> e) =>
          PromotionBeanListChild.fromJson(e)).toList() as M;
    }
    if (<PromotionBeanListChildProduct>[] is M) {
      return data.map<PromotionBeanListChildProduct>((Map<String, dynamic> e) =>
          PromotionBeanListChildProduct.fromJson(e)).toList() as M;
    }
    if (<PromotionBeanListChildCanshu>[] is M) {
      return data.map<PromotionBeanListChildCanshu>((Map<String, dynamic> e) =>
          PromotionBeanListChildCanshu.fromJson(e)).toList() as M;
    }
    if (<QrBeanEntity>[] is M) {
      return data.map<QrBeanEntity>((Map<String, dynamic> e) =>
          QrBeanEntity.fromJson(e)).toList() as M;
    }
    if (<SettingBeanEntity>[] is M) {
      return data.map<SettingBeanEntity>((Map<String, dynamic> e) =>
          SettingBeanEntity.fromJson(e)).toList() as M;
    }
    if (<TypeItemEntity>[] is M) {
      return data.map<TypeItemEntity>((Map<String, dynamic> e) =>
          TypeItemEntity.fromJson(e)).toList() as M;
    }
    if (<UserInfoEntity>[] is M) {
      return data.map<UserInfoEntity>((Map<String, dynamic> e) =>
          UserInfoEntity.fromJson(e)).toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (BalanceBeanEntity).toString(): BalanceBeanEntity.fromJson,
    (BannerBeanEntity).toString(): BannerBeanEntity.fromJson,
    (CartBeanEntity).toString(): CartBeanEntity.fromJson,
    (CartBeanList).toString(): CartBeanList.fromJson,
    (CartBeanListAddress).toString(): CartBeanListAddress.fromJson,
    (CartBeanListProducts).toString(): CartBeanListProducts.fromJson,
    (CartBeanListProductsGradeInfo).toString(): CartBeanListProductsGradeInfo
        .fromJson,
    (CollectItemEntity).toString(): CollectItemEntity.fromJson,
    (CollectItemGoods).toString(): CollectItemGoods.fromJson,
    (FeatureEntity).toString(): FeatureEntity.fromJson,
    (FeatureProduct).toString(): FeatureProduct.fromJson,
    (FeatureCanshu).toString(): FeatureCanshu.fromJson,
    (GoodBeanEntity).toString(): GoodBeanEntity.fromJson,
    (GoodBeanProduct).toString(): GoodBeanProduct.fromJson,
    (GoodBeanProductGradeInfo).toString(): GoodBeanProductGradeInfo.fromJson,
    (GoodBeanCanshu).toString(): GoodBeanCanshu.fromJson,
    (GoodCatBeanEntity).toString(): GoodCatBeanEntity.fromJson,
    (GoodCatBeanChild).toString(): GoodCatBeanChild.fromJson,
    (GoodCatBeanGoods).toString(): GoodCatBeanGoods.fromJson,
    (GoodCatBeanGoodsProduct).toString(): GoodCatBeanGoodsProduct.fromJson,
    (GoodCatBeanGoodsCanshu).toString(): GoodCatBeanGoodsCanshu.fromJson,
    (GoodCatBeanGoodsBrand).toString(): GoodCatBeanGoodsBrand.fromJson,
    (OrderBeanEntity).toString(): OrderBeanEntity.fromJson,
    (OrderBeanList).toString(): OrderBeanList.fromJson,
    (OrderBeanListItems).toString(): OrderBeanListItems.fromJson,
    (PageBeanEntity).toString(): PageBeanEntity.fromJson,
    (PageBeanChild).toString(): PageBeanChild.fromJson,
    (PageBeanChildProduct).toString(): PageBeanChildProduct.fromJson,
    (PageBeanChildCanshu).toString(): PageBeanChildCanshu.fromJson,
    (PromotionBeanEntity).toString(): PromotionBeanEntity.fromJson,
    (PromotionBeanList).toString(): PromotionBeanList.fromJson,
    (PromotionBeanListChild).toString(): PromotionBeanListChild.fromJson,
    (PromotionBeanListChildProduct).toString(): PromotionBeanListChildProduct
        .fromJson,
    (PromotionBeanListChildCanshu).toString(): PromotionBeanListChildCanshu
        .fromJson,
    (QrBeanEntity).toString(): QrBeanEntity.fromJson,
    (SettingBeanEntity).toString(): SettingBeanEntity.fromJson,
    (TypeItemEntity).toString(): TypeItemEntity.fromJson,
    (UserInfoEntity).toString(): UserInfoEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}